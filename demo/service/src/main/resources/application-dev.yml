server:
  port: 7081
  servlet:
    context-path: /${SERVICE_NAME:demo} 

security: 
  enabled: false
#  oauth2: 
#    client: 
#      clientId: client
#      clientSecret: secret 
#      scope: openid
#      accessTokenUri: http://localhost:8500/mdpauth/oauth/token
#      userAuthorizationUri: http://localhost:8500/mdpauth/oauth/authorize
#    resource: 
#      jwt: 
#        key-uri: http://localhost:8500/mdpauth/oauth/token_key
  oauth2: 
    client: 
      clientId:
      clientSecret: 
      scope:
      accessTokenUri:
      userAuthorizationUri:
    resource: 
      jwt:
        key-uri:
        
spring:
# Postgres
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/smsverification
    username: postgres
    password: 1234
    hikari:
      connection-test-query:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
    show-sql: true
    generate-ddl: false
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        globally_quoted_identifiers: true # Для PostgreSQL установить в true, для MSSQL, Oracle в false
        jdbc:
          time_zone: UTC
          lob:
            non_contextual_creation: true

# Oracle
#  datasource:
#    driverClassName: oracle.jdbc.OracleDriver
#    url: jdbc:oracle:thin:@aml2devops:1521:tstdf
#    username: TEMPLATE
#    password: TEMPLATE
#    hikari:
#      connection-test-query:
#  jpa:
#    database-platform: org.hibernate.dialect.Oracle10gDialect
#    show-sql: true
#    generate-ddl: false
#    hibernate:
#      ddl-auto: none
#      naming: 
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#    properties:
#      hibernate:
#        globally_quoted_identifiers: false # Для PostgreSQL установить в true, для MSSQL, Oracle в false
#        jdbc:
#          time_zone: UTC
#          lob:
#            non_contextual_creation: true

# h2
#  datasource:
#    driverClassName: org.h2.Driver
#    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
#    username: sa
#    password:
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect
#    show-sql: true
#    generate-ddl: true
#    hibernate:
#      ddl-auto: none
#      naming:
#        physical-strategy: ru.diasoft.micro.lib.config.H2PhysicalNamingStrategy
#    properties:
#      hibernate:
#        jdbc:
#          time_zone: UTC
#          lob:
#            non_contextual_creation: true
# Generate Events Publisher or Subsriber
#  kafka:
#    bootstrap-servers: localhost:9092
#  cloud:
#    stream:
#      binders:
#        binderName:
#          type: kafka
#      bindings:
#        eventHelloPublish:
#          destination: event-hello
#        eventHelloSubscribe:
#          destination: event-hello
#  messages:
#    basename: i18n.messages

dstrace:
  enabled: ${TRACER_ENABLE:false}
  mode: ${TRACE_MODE:develop}
  collector:
    type: http
    address: ${TRACER_HOST:localhost}:${TRACER_PORT:9411}

dslogging:
  nesting-level-limit: ${LOGGING_NESTING_LEVEL_LIMIT:2}
  items-on-level-limit: ${LOGGING_ITEMS_ON_LEVEL_LIMIT:100}
  exclude-items: ${LOGGING_EXCLUDE_ITEMS:}
  include-items: ${LOGGING_INCLUDE_ITEMS:}

logging:
  config: classpath:log4j2.xml
  level:
    root: ${LOGGING_ROOT_LEVEL:INFO}
    ru.diasoft.micro: ${LOGGING_LEVEL:DEBUG}
    org.hibernate.type: ${LOGGING_HIBERNATE_LEVEL:INFO} #To log values set TRACE
#    kafka: ${LOGGING_KAFKA_LEVEL:INFO}
#    org.apache.kafka.clients: ${LOGGING_KAFKA_LEVEL:INFO}
#    org.springframework.kafka.listener: ${LOGGING_KAFKA_LEVEL:INFO}

chaos:
  monkey:
    enabled: false
    watcher:
      component: false
      controller: false
      repository: false
      rest-controller: true
      service: true  
      
feign:
  client:
    config:
      default:
        connectTimeout: 300000
        readTimeout: 300000
        
rest-template:
  config:
    connectTimeout: 300000
    readTimeout: 300000

eureka:
  client:
    enabled: true
    fetchRegistry: true
    registryFetchIntervalSeconds: 5
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 5
    lease-expiration-duration-in-seconds: 5